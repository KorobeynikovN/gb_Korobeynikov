import UIKit

//1. Реализовать свой тип коллекции «очередь» (queue) c использованием дженериков.

//2. Добавить ему несколько методов высшего порядка, полезных для этой коллекции (пример: filter для массивов)

//3. * Добавить свой subscript, который будет возвращать nil в случае обращения к несуществующему индексу.

protocol Client {
    var name: String {get}
    var age: Int {get}
}

class OueueAir: Client {
    var name: String
    var age: Int
    var flightNumber : String
    var seat : String
    init(name: String, age : Int,  flightNumber : String, seat : String) {
        self.flightNumber = flightNumber
        self.seat = seat
        self.age = age
        self.name = name
    }
}


struct Stack<T: Client> {                   // T - это какой-то пока неизвестный тип
    private var elements: [T] = []           // массив типа Т
    
    mutating func push(_ element: T) {      // добавляем элемент типа Т
        elements.append(element)
    }
    mutating func pop() -> T? {           // извлекаем элемент типа Т
        guard !elements.isEmpty else {
            return nil
        }
        return elements.removeFirst()
    }
    
    mutating func filter (_ type: (T) -> Bool) -> [T]?{
        guard  !elements.isEmpty else {
            return nil
        }
        return self.elements.filter(type)
    }
}
let Air_1 = OueueAir(name : "Иванова Ольга", age : 54, flightNumber : "FL350",seat : "11A")
let Air_2 = OueueAir(name : "Толмачев Владимир", age : 32, flightNumber : "FL350",seat : "11B")
let Air_3 = OueueAir(name: "Ivanov", age: 29, flightNumber : "FL356",seat : "1E")

var stackAir = Stack<OueueAir>()

stackAir.push(Air_1)
stackAir.push(Air_3)
stackAir.push(Air_2)

print(stackAir.pop()?.name)
