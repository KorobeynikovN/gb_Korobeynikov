import UIKit

//task1
//Описать несколько структур – любой легковой автомобиль SportCar и любой грузовик TrunkCar.
enum Marka{
    case Mersedes, Volvo, Hynday
}

enum CarType{
    case Auto,Truck
}

enum Transmission {
    case manual, auto
}

//ВОПРОС
//в enum как можно записать числа?
//enum CountWheel{
//    case '4','6','8'
//    case 4,6,8
//}

//ВОПРОС
//enam A {case Audi,Volvo,VAZ}  ==  enam B {case Audi  case Volvo case VAZ}
//??

enum Okno {
    case open, close
}

enum Engine{
    case on,off
}

struct Car {
    let marka : Marka
    let type : CarType
    let transmission : Transmission
    let model : String
    let year : Int
    var okno : Okno
    var engine : Engine
    //ВОПРОС  верно понимаю, что внутри структуры LET используется для полностью статичных состояний = модель год выпуска тип трансмиссии...  а вот если это например пробег, или состояние двигателя (вкл/выкл) то объявление через var?  и это свойство можно будет далее менять в программе?
    
    mutating func OknoOpen (_ n: Bool){
        if n {
            self.okno = .open
        }else {
            self.okno = .close
        }
    }
}



//task2
//Описать в каждом наследнике специфичные для него свойства.Структуры должны содержать марку авто, год выпуска, объем багажника/кузова, запущен ли двигатель, открыты ли окна, заполненный объем багажника.
var car = Car(marka: .Mersedes, type: .Auto, transmission: .manual, model: "GLC", year: 2019, okno: .close, engine: .off)
var truck = Car(marka: .Volvo, type: .Truck, transmission: .auto, model: "kl_10000", year: 2014, okno: .open, engine: .on)




//task3
//Описать перечисление с возможными действиями с автомобилем: запустить/заглушить двигатель, открыть/закрыть окна, погрузить/выгрузить из кузова/багажника груз определенного объема.
//task4
//Добавить в структуры метод с одним аргументом типа перечисления, который будет менять свойства структуры в зависимости от действия.
print("----  task 4 ----")
print(car.marka," ",car.model," ",car.transmission," ",car.type," ",car.engine," ",car.year," ",car.okno)
car.OknoOpen(true)
print(car.marka," ",car.model," ",car.transmission," ",car.type," ",car.engine," ",car.year," ",car.okno)


//task5
//Инициализировать несколько экземпляров структур. Применить к ним различные действия.
var car2 = Car(marka: .Hynday, type: .Auto, transmission: .auto, model: "Sonata", year: 2019, okno: .close, engine: .off)
var truck2 = Car(marka: .Mersedes, type: .Truck, transmission: .auto, model: "Sprinter 20", year: 2018, okno: .close, engine: .on)
car2.OknoOpen(true)
truck.OknoOpen(true)
car2.OknoOpen(false)


//task6
//Вывести значения свойств экземпляров в консоль.
func PrintInfo(_ M : Car){
    print(M.marka," ",M.model," ",M.transmission," ",M.type," ",M.engine," ",M.year," ",M.okno)
}
print("----  task 6 ----")
PrintInfo(car)
PrintInfo(car2)
PrintInfo(truck)
PrintInfo(truck2)
