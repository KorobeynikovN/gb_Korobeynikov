import UIKit

//1. Создать протокол «Car» и описать свойства, общие для автомобилей, а также метод действия.

//2. Создать расширения для протокола «Car» и реализовать в них методы конкретных действий с автомобилем: открыть/закрыть окно, запустить/заглушить двигатель и т.д. (по одному методу на действие, реализовывать следует только те действия, реализация которых общая для всех автомобилей).

//3. Создать два класса, имплементирующих протокол «Car» - trunkCar и sportСar. Описать в них свойства, отличающиеся для спортивного автомобиля и цистерны.

protocol Car {
    var model : String {get}
    var odometr : Double {get set}
    var inTaxi : Bool {get set}
    func odo(km : Double)
}


extension Car {
    mutating func  odo(km : Double){
        switch self.inTaxi{
        case true:
            self.odometr += km
            print("Вы проехали \(km), текущий общий пробег машины \(self.odometr)")
        case false:
            print("Переведите машину в режим такси")
        }
    }
}

class CarTaxi : Car {
    var model : String = ""
    var odometr : Double = 0
    var inTaxi : Bool = false
    
    func odo(km : Double){
        self.odometr += km
    }
}

extension CarTaxi: CustomStringConvertible {
    var description: String {
        return "Автомобиль марки \(model) сейчас \(inTaxi ? "работает в такси" : "находится в таксопарке"). Пробег = \(odometr)) "
    }
}

//4. Для каждого класса написать расширение, имплементирующее протокол CustomStringConvertible.
//5. Создать несколько объектов каждого класса. Применить к ним различные действия.
//6. Вывести сами объекты в консоль.

var logan = CarTaxi()
logan.model = "Renault Logan"
logan.odometr = 1000
logan.inTaxi = true
print(logan.description)
logan.odo(km: 20.5)
logan.inTaxi = false
print(logan.description)
